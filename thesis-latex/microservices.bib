@article{Seek2017,
author = {Seek, Companies and Improve, To},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Seek, Improve - 2017 - Containers Real Adoption And Use Cases In 2017 1 Executive Summary 2 Containers Are Breaking Out Of The Test De.pdf:pdf},
number = {March},
title = {{Containers : Real Adoption And Use Cases In 2017 1 Executive Summary 2 Containers Are Breaking Out Of The Test / Dev Environment 5 Organizations Are Modernizing Applications — Or Are They ? 7 Containerization Will Grow As Organizations Seek To Improve Eff}},
year = {2017}
}
@article{Taibi2019,
abstract = {Decomposition is one of the most complex tasks during the migration from monolithic systems to microservices, generally performed manually, based on the experience of the software architects. In this work, we propose a 6-step framework to reduce the subjectivity of the decomposition process. The framework provides software architects with a set of decomposition options, together with a set of measures to evaluate and compare their quality. The decomposition options are identified based on the independent execution traces of the system by means of the application of a process-mining tool to the log traces collected at runtime. We validated the process, in an industrial project, by comparing the proposed decomposition options with the one proposed by the software architect that manually analyzed the system. The application of our framework allowed the company to identify issues in their software that the architect did not spot manually, and to discover more suitable decomposition options that the architect did not consider. The framework could be very useful also in other companies to improve the quality of the decomposition of any monolithic system, identifying different decomposition strategies and reducing the subjectivity of the decomposition process. Moreover, researchers could extend our approach increasing the support and further automating the decomposition support.},
author = {Taibi, Davide and Syst{\"{a}}, Kari},
doi = {10.5220/0007755901530164},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Taibi, Syst{\"{a}} - 2019 - From monolithic systems to microservices A decomposition framework based on process mining.pdf:pdf},
isbn = {9789897583650},
journal = {CLOSER 2019 - Proceedings of the 9th International Conference on Cloud Computing and Services Science},
keywords = {Cloud-native,Microservice decomposition,Microservice migration,Microservice slicing,Microservices},
number = {May},
pages = {153--164},
title = {{From monolithic systems to microservices: A decomposition framework based on process mining}},
year = {2019}
}
@article{Bernstein2014,
abstract = {This issue's 'Cloud Tidbit' focuses on container technology and how it's emerging as an important part of the cloud computing infrastructure. It looks at Docker, an open source project that automates the faster deployment of Linux applications, and Kubernetes, an open source cluster manager for Docker containers.},
author = {Bernstein, David},
doi = {10.1109/MCC.2014.51},
file = {:D\:/Documents/Bath/Dissertation/References/07036275.pdf:pdf},
issn = {23256095},
journal = {IEEE Cloud Computing},
keywords = {cloud,containers,dockers,virtual machines},
number = {3},
pages = {81--84},
publisher = {Published by the IEEE Computer Society},
title = {{Containers and cloud: From LXC to docker to kubernetes}},
volume = {1},
year = {2014}
}
@article{Tonelli2019,
abstract = {Blockchain technologies and smart contracts are becoming mainstream research fields in computer science and researchers are continuously investigating new frontiers for new applications. Likewise, microservices are getting more and more popular in the latest years thanks to their properties, that allow teams to slice existing information systems into small and independent services that can be developed independently by different teams.A symmetric paradigm applies to smart contracts as well, which represent well defined, usually isolated, executable programs, typically implementing simple and autonomous tasks with a well defined purpose, which can be assumed as services provided by the Contract. In this work we analyze a concrete case study where the microservices architecture environment is replicated and implemented through an equivalent set of smart contracts, showing for the first time the feasibility of implementing a microservices-based system with smart contracts and how the two innovative paradigms match together.Results show that it is possible to implement a simple microservices-based system with smart contracts maintaining the same set of functionalities and results. The result could be highly beneficial in contexts such as smart voting, where not only the data integrity is fundamental but also the source code executed must be trustable.},
author = {Tonelli, Roberto and Lunesu, Maria Ilaria and Pinna, Andrea and Taibi, Davide and Marchesi, Michele},
doi = {10.1109/IWBOSE.2019.8666520},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tonelli et al. - 2019 - Implementing a Microservices System with Blockchain Smart Contracts.pdf:pdf},
isbn = {9781728118079},
journal = {IWBOSE 2019 - 2019 IEEE 2nd International Workshop on Blockchain Oriented Software Engineering},
keywords = {Blockchain,Cloud Native,Microservice,Serverless,Smart contract},
pages = {22--31},
publisher = {IEEE},
title = {{Implementing a Microservices System with Blockchain Smart Contracts}},
year = {2019}
}
@article{Jaramillo2016,
abstract = {Microservices architecture is not a hype and for awhile, started getting attention from organizations who want to shorten time to market of a software product by improving productivity effect through maximizing the automation in all life circle of the product. However, microservices architecture approach also introduces a lot of new complexity and requires application developers a certain level of maturity in order to confidently apply the architectural style. Docker has been a disruptive technology which changes the way applications are being developed and distributed. With a lot of advantages, Docker is a very good fit to implementing microservices architecture. In this paper we will discuss about how Docker can effectively help in leveraging mircoservices architecture with a real working model as a case study.},
author = {Jaramillo, David and Nguyen, Duy V. and Smart, Robert},
doi = {10.1109/SECON.2016.7506647},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Jaramillo, Nguyen, Smart - 2016 - Leveraging microservices architecture by using Docker technology.pdf:pdf},
isbn = {9781509022465},
issn = {07347502},
journal = {Conference Proceedings - IEEE SOUTHEASTCON},
keywords = {automation,devops,docker,micoservices},
pages = {1--5},
publisher = {IEEE},
title = {{Leveraging microservices architecture by using Docker technology}},
volume = {2016-July},
year = {2016}
}
@article{Beaulieu-Jones2017,
abstract = {Replication, validation and extension of experiments are crucial for scientific progress. Computational experiments are scriptable and should be easy to reproduce. However, computational analyses are designed and run in a specific computing environment, which may be difficult or impossible to match using written instructions. We report the development of continuous analysis, a workflow that enables reproducible computational analyses. Continuous analysis combines Docker, a container technology akin to virtual machines, with continuous integration, a software development technique, to automatically rerun a computational analysis whenever updates or improvements are made to source code or data. This enables researchers to reproduce results without contacting the study authors. Continuous analysis allows reviewers, editors or readers to verify reproducibility without manually downloading and rerunning code and can provide an audit trail for analyses of data that cannot be shared.},
author = {Beaulieu-Jones, Brett K. and Greene, Casey S.},
doi = {10.1038/nbt.3780},
file = {:D\:/Documents/Bath/Dissertation/References/nbt.3780.pdf:pdf},
issn = {15461696},
journal = {Nature Biotechnology},
number = {4},
pages = {342--346},
publisher = {Nature Publishing Group},
title = {{Reproducibility of computational workflows is automated using continuous analysis}},
volume = {35},
year = {2017}
}
@article{Huang2019,
abstract = {Huge data sets and high resources consumption are the prominent features of machine learning services. At present, machine learning services are often deployed on large-scaled cloud servers. The cloud utilizes its rich resources to perform the model training and prediction tasks, but the performance of this method is often limited by the unstable network conditions. To combine the richresources advantage of the cloud server with the stable-network performance of the edge computing technology, this paper proposes a Cloud-training and Edge-predicting framework. By integrating the Docker container technology and Kubernetes container choreography technology, we build an edge computing platform, and deploy a machine learning model (Inception V3) on the platform. With this method, we implemented machine learning services on the edge side. In this paper, we have described the designing and building process of the edge computing platform and the deployment procedure of the machine learning model in detail, and we have taken an experiment to implement the service to prove the feasibility of our ideas.},
author = {Huang, Yuzhou and Zong, Ran and Cai, Kaiyu and Mao, Yugang},
doi = {10.1145/3318265.3318288},
file = {:D\:/Downloads/3318265.3318288.pdf:pdf},
isbn = {9781450366380},
journal = {ACM International Conference Proceeding Series},
keywords = {Docker,Edge Computing,Kubernetes,Machine Learning},
pages = {29--32},
title = {{Design and implementation of an edge computing platform architecture using docker and kubernetes for machine learning}},
year = {2019}
}
@article{Madnani2018,
abstract = {We present a microservice architecture for large-scale automated scoring applications. Our architecture builds on the open-source Apache Storm framework and facilitates the development of robust, scalable automated scoring applications that can easily be extended and customized. We demonstrate our architecture with an application for automated content scoring.},
author = {Madnani, Nitin and Cahill, Aoife and Blanchard, Daniel and Andreyev, Slava and Napolitano, Diane and Gyawali, Binod and Heilman, Michael and Lee, Chong Min and Leong, Chee Wee and Mulholland, Matthew and Riordan, Brian},
doi = {10.1002/ets2.12202},
file = {:D\:/Documents/Bath/Dissertation/References/ets2.12202.pdf:pdf},
issn = {23308516},
journal = {ETS Research Report Series},
keywords = {Apache Storm,Automated scoring,machine learning,microservices},
number = {1},
title = {{A Robust Microservice Architecture for Scaling Automated Scoring Applications}},
volume = {2018},
year = {2018}
}
@article{Pahl2018a,
abstract = {Machine Learning is recently becoming a universal problem solving tool. However, implementing machine learning (ML) into applications is difficult, time intense, and requires expert knowledge. We encapsulate machine learning as a dataoriented microservice that can simply be used to mash up applications with machine learning capabilities. To illustrate the approach we identify three machine learning algorithms that are relevant for the Internet of Things (IoT): Feed-Forward Neural Networks (FFNN), Deep Believe Networks (DBN), and Recurrent Neural Networks (RNN). We analyze those algorithm's characteristic properties and model them as configurations for dynamically linkable REST ML service modules. Our approach strictly separates the algorithm implementation from its configuration. It allows a simple extension with diverse ML algorithms. Following a service oriented design, we implement the training of our neural networks as a separate module. We evaluate how the performance of our solution compares to directly programming the chosen TensorFlow library. Our approach facilitates the implementation of ML-based data analytics significantly by enabling reuse and sharing of executables and configurations. It enables rapid prototyping and an explorative use of ML.},
author = {Pahl, Marc Oliver and Loipfinger, Markus},
doi = {10.1109/NOMS.2018.8406165},
file = {:D\:/Documents/Bath/Dissertation/References/08406165.pdf:pdf},
isbn = {9781538634165},
journal = {IEEE/IFIP Network Operations and Management Symposium: Cognitive Management in a Cyber World, NOMS 2018},
keywords = {Encapsulation,High usability,Machine learning,Microservices,Neural networks,Reuse,Service orientation},
pages = {1--7},
publisher = {IEEE},
title = {{Machine learning as a reusable microservice}},
year = {2018}
}
@article{Xue2018,
abstract = {Microservice architecture (MSA) is a new kind of service-oriented architecture. The architecture requires that system components are implemented in the form of microservices. Microservices are message-driven services with small size, and they can be independently developed and automatically deployed. Microservices can be built and released in software containers, since a software container can provide an isolated and portable environment for executing programs. This paper observes structures and functions of containerized microservices from a formal point of view. A framework of categories is adopted for modelling structures and dynamics of containerized microservices. Some issues, which include interoperation, registration and accessing of microservices, are discussed in this paper, and relevant models are formed under the help of the category-based tools. The established models show that the adopted framework can be applied in modelling microservice-oriented applications, and it is able to bring functional and structural features of applications closer together.},
author = {Xue, Gang and Liu, Jing and Wu, Liwen},
doi = {10.18280/ama_a.550101},
file = {:D\:/Documents/Bath/Dissertation/References/85f596c9717fa244631a120a2d5836d1b2b4.pdf:pdf},
issn = {12585769},
journal = {Advances in Modelling and Analysis A},
keywords = {Containerized microservices,Microservice architecture,Microservices modelling,The category of mode-dependent networks},
number = {1},
pages = {1--10},
title = {{Containerized microservices: Structures and dynamics}},
volume = {55},
year = {2018}
}
@misc{FowlerMicroservices,
author = {Lewis, James and Fowler, Martin},
file = {:D\:/Documents/Bath/Dissertation/References/Microservices fowler.pdf:pdf},
pages = {1--28},
title = {{Microservices: a definition of this new architectural term}},
url = {https://martinfowler.com/articles/microservices.html},
urldate = {5 May 2020},
year = {2014}
}
@book{Mazzara2017,
abstract = {This book provides an effective overview of the state-of-the art in software engineering, with a projection of the future of the discipline. It includes 13 papers, written by leading researchers in the respective fields, on important topics like model-driven software development, programming language design, microservices, software reliability, model checking and simulation. The papers are edited and extended versions of the presentations at the PAUSE symposium, which marked the completion of 14 years of work at the Chair of Software Engineering at ETH Zurich. In this inspiring context, some of the greatest minds in the field extensively discussed the past, present and future of software engineering. It guides readers on a voyage of discovery through the discipline of software engineering today, offering unique food for thought for researchers and professionals, and inspiring future research and development.},
author = {Mazzara, Manuel and Meyer, Bertrand},
booktitle = {Present and Ulterior Software Engineering},
doi = {10.1007/978-3-319-67425-4},
file = {:D\:/Documents/Bath/Dissertation/References/2017_Book_PresentAndUlteriorSoftwareEngi.pdf:pdf},
isbn = {9783319674254},
pages = {1--225},
title = {{Present and ulterior software engineering}},
year = {2017}
}
@article{Wan2018,
abstract = {To improve the scalability and elasticity of application deployment and operation in cloud computing environments, new architectures and techniques are developed and studied, e.g., microservice architecture, and Docker container. Especially, Docker container enables the sharing on operation system and supporting libraries, which is more lightweight, prompt and scalable than Hypervisor based virtualization. These features make it ideally suit for applications deployed in microservice architecture. However, existing models and schemes, which are mostly designed for Hypervisor based virtualization techniques, fall short to be efficiently used for Docker container based application deployment. To take the benefits of microservice architecture and Docker containers, we explore the optimization of application deployment in cloud data centers using microservice and Docker containers. Our goal is to minimize the application deployment cost as well as the operation cost while preserving service delay requirements for applications. In this paper, we first formulate the application deployment problem by examining the features of Docker, the requirements of microservice-based applications, and available resources in cloud data centers. We further propose a communication efficient framework and a suboptimal algorithm to determine the container placement and task assignment. The proposed algorithm works in a distributed and incremental manner, which makes it scalable to massive physical resources and diverse applications under the framework. We validate the efficiency of our solution through comparisons with three existing strategies in Docker Swarm using real traces from Google Cluster. The evaluation results show that the proposed framework and algorithm provide more flexibility and save more cost than existing strategies.},
author = {Wan, Xili and Guan, Xinjie and Wang, Tianjing and Bai, Guangwei and Choi, Baek Yong},
doi = {10.1016/j.jnca.2018.07.003},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wan et al. - 2018 - Application deployment using Microservice and Docker containers Framework and optimization.pdf:pdf},
issn = {10958592},
journal = {Journal of Network and Computer Applications},
keywords = {Application deployment,Docker container,Microservice architecture},
number = {December 2017},
pages = {97--109},
publisher = {Elsevier Ltd},
title = {{Application deployment using Microservice and Docker containers: Framework and optimization}},
url = {https://doi.org/10.1016/j.jnca.2018.07.003},
volume = {119},
year = {2018}
}
@article{Kang2016,
abstract = {Emerging container technologies, such as Docker, offer unprecedented agility in developing and running applications in cloud environment especially when combined with a microservice-style architecture. However, it is often difficult to use containers to manage the cloud infrastructure, without sacrificing many benefits container offers. This paper identifies the key challenges that impede realizing the full promise of containerizing infrastructure services. Using OpenStack as a case study, we explore solutions to these challenges. Specifically, we redesign OpenStack deployment architecture to enable dynamic service registration and discovery, explore different ways to manage service state in containers, and enable containers to access the host kernel and devices. We quantify the efficiency of the container-based microservice-style DevOps compared to the VM-based approach, and study the scalability of the stateless and stateful containerized components. We also discuss limitations in our current design, and highlight open research problems that, if solved, can lead to wider adoption of containers in cloud infrastructure management.},
author = {Kang, Hui and Le, Michael and Tao, Shu},
doi = {10.1109/IC2E.2016.26},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kang, Le, Tao - 2016 - Container and microservice driven design for cloud infrastructure DevOps.pdf:pdf},
isbn = {9781509019618},
journal = {Proceedings - 2016 IEEE International Conference on Cloud Engineering, IC2E 2016: Co-located with the 1st IEEE International Conference on Internet-of-Things Design and Implementation, IoTDI 2016},
keywords = {Cloud computing,DevOps,OpenStack,container},
pages = {202--211},
publisher = {IEEE},
title = {{Container and microservice driven design for cloud infrastructure DevOps}},
year = {2016}
}
@article{Sarita2018,
abstract = {Adaption to container-based micro services architecture will shorten the time to react to the market and help deliver a quality product to the customers. Docker which is based on container-based virtualization has changed the way we look at application deployment. Microservices architecture also introduces complexities which can be mitigated by services scheduling and resource management. In this paper, we present an approach on how to transform your existing monolith into microservices architecture, deploy and deliver using Docker, the way a high velocity organization does with agile development, scalability and an ability to move to the cloud. The contributions of paper are a) An approach to transform existing application into microservices architecture b) Microservices deployment strategy using Docker c) Service discovery pattern d) Proposed strategy to build and ship microservices using Docker.},
author = {Sarita and Sebastian, Sunil},
doi = {10.1109/ICCUBEA.2017.8463820},
file = {:D\:/Documents/Bath/Dissertation/References/08463820.pdf:pdf},
isbn = {9781538640081},
journal = {2017 International Conference on Computing, Communication, Control and Automation, ICCUBEA 2017},
keywords = {Docker,Microservices architecture,Monolith,Service Discovery},
pages = {1--5},
publisher = {IEEE},
title = {{Transform Monolith into Microservices using Docker}},
year = {2018}
}
@article{Scolati2019,
abstract = {The constant increase of the amount of data generated by Internet of Things (IoT) devices creates challenges for the supporting cloud infrastructure, which is often used to process and store the data. This work focuses on an alternative approach, based on the edge cloud computing model, i.e., processing and filtering data before transferring it to a backing cloud infrastructure. We describe the implementation of a low-power and low-cost cluster of single board computers (SBC) for this context, applying models and technologies from the Big Data domain with the aim of reducing the amount of data which has to be transferred elsewhere. To implement the system, a cluster of Raspberry Pis was built, relying on Docker to containerize and deploy an Apache Hadoop and Apache Spark cluster, on which a test application is then executed. A monitoring stack based on Prometheus, a popular monitoring and alerting tool in the cloud-native industry, is used to gather system metrics and analyze the performance of the setup. We evaluate the complexity of the system, showing that by means of containerization increased fault tolerance and ease of maintenance can be achieved, which makes the proposed solution suitable for an industrial environment. Furthermore, an analysis of the overall performance, which takes into account the resource usage of the proposed solution with regards to the constraints imposed by the devices, is presented in order to discuss the capabilities and limitations of proposed architecture.},
author = {Scolati, Remo and Fronza, Ilenia and {El Ioini}, Nabil and Samir, Areeg and Pahl, Claus},
doi = {10.5220/0007695000680080},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Scolati et al. - 2019 - A containerized big data streaming architecture for edge cloud computing on clustered single-board devices.pdf:pdf},
isbn = {9789897583650},
journal = {CLOSER 2019 - Proceedings of the 9th International Conference on Cloud Computing and Services Science},
keywords = {Big data,Cluster architecture,Container technology,Data streaming,Docker swarm,Edge cloud,Performance engineering,Raspberry Pi},
number = {May},
pages = {68--80},
title = {{A containerized big data streaming architecture for edge cloud computing on clustered single-board devices}},
year = {2019}
}
@article{Soldani2018,
abstract = {The design, development, and operation of microservices are picking up more and more momentum in the IT industry. At the same time, academic work on the topic is at an early stage, and still on the way to distilling the actual “Pains & Gains” of microservices as an architectural style. Having witnessed this gap, we set forth to systematically analyze the industrial grey literature on microservices, to identify the technical/operational pains and gains of the microservice-based architectural style. We conclude by discussing research directions stemming out from our analysis.},
author = {Soldani, Jacopo and Tamburri, Damian Andrew and {Van Den Heuvel}, Willem Jan},
doi = {10.1016/j.jss.2018.09.082},
file = {:D\:/Documents/Bath/Dissertation/References/1-s2.0-S0164121218302139-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Microservices,Microservices design,Microservices development,Microservices operation,Systematic grey literature review,Systematic literature review},
pages = {215--232},
publisher = {Elsevier Inc.},
title = {{The pains and gains of microservices: A Systematic grey literature review}},
url = {https://doi.org/10.1016/j.jss.2018.09.082},
volume = {146},
year = {2018}
}
@article{Buitinck2013,
abstract = {Scikit-learn is an increasingly popular machine learning li- brary. Written in Python, it is designed to be simple and efficient, accessible to non-experts, and reusable in various contexts. In this paper, we present and discuss our design choices for the application programming interface (API) of the project. In particular, we describe the simple and elegant interface shared by all learning and processing units in the library and then discuss its advantages in terms of composition and reusability. The paper also comments on implementation details specific to the Python ecosystem and analyzes obstacles faced by users and developers of the library.},
archivePrefix = {arXiv},
arxivId = {1309.0238},
author = {Buitinck, Lars and Louppe, Gilles and Blondel, Mathieu and Pedregosa, Fabian and Mueller, Andreas and Grisel, Olivier and Niculae, Vlad and Prettenhofer, Peter and Gramfort, Alexandre and Grobler, Jaques and Layton, Robert and Vanderplas, Jake and Joly, Arnaud and Holt, Brian and Varoquaux, Ga{\"{e}}l},
eprint = {1309.0238},
file = {:D\:/Documents/Bath/Dissertation/References/1309.0238.pdf:pdf},
pages = {1--15},
title = {{API design for machine learning software: experiences from the scikit-learn project}},
url = {http://arxiv.org/abs/1309.0238},
year = {2013}
}
@article{Thones2015,
abstract = {In this excerpt from Software Engineering Radio, Johannes Th{\"{o}}nes talks with James Lewis, principal consultant at ThoughtWorks, about microservices. They discuss microservices' recent popularity, architectural styles, deployment, size, technical decisions, and consumer-driven contracts. They also compare microservices to service-oriented architecture and wrap up the episode by talking about key figures in the microservice community and standing on the shoulders of giants. The Web extra at http://www.se-radio.net/2014/10/episode-213-james-lewis-on-microservices is an audio recording of Tobias Kaatz speaking with James Lewis, principal consultant at ThoughtWorks, about microservices. They discuss microservices' recent popularity, architectural styles, deployment, size, technical decisions, and consumer-driven contracts. They also compare microservices to service-oriented architecture and wrap up the episode by talking about key figures in the microservice community and standing on the shoulders of giants.},
author = {Th{\"{o}}nes, Johannes},
doi = {10.1109/MS.2015.11},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Th{\"{o}}nes - 2015 - Microservices.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {SE Radio,architecture,enterprise service bus,http,microservice,service-oriented architecture,software engineering},
number = {1},
title = {{Microservices}},
volume = {32},
year = {2015}
}
@article{Lee1390,
author = {Lee, Gyu Myoung and Um, Tai-Won and Choi, Jun Kyun},
file = {:D\:/Documents/Bath/Dissertation/References/08597704.pdf:pdf},
pages = {368},
title = {{AI as a microservice (AIMS) over 5G networks}},
year = {1390}
}
@article{Lv2019,
abstract = {Good progress has been made in the microservice technology in recent years due to the development of docker container technology. Although microservice architecture can adjust the number of containers, there is a new problem. That is according to the current load pressure of services, how to adjust the number of containers accurately and quickly in real time, especially when the load pressure of services suddenly increases or decreases. In order to deal with the problem, a container scheduling strategy based on machine learning is proposed in this paper. The paper uses the data set obtained by our experiments to train random forest regression model in advance to predict the required containers of services in the next time window, according to the current load pressure of services. Large amounts of data has been collected to make the data set for the experiment. Based on the data set, random forest regression model has been trained in advance to predict the number of required containers of services in next time window. When adjusting the number of containers to balance load pressure of services, the proposed algorithm saves 50% of the time compared with traditional algorithms. In addition, the accuracy is 10%∼38% higher compared with other machine learning algorithms.},
author = {Lv, Jingze and Wei, Mingchang and Yu, Yang},
doi = {10.1109/SCC.2019.00023},
file = {:D\:/Documents/Bath/Dissertation/References/A Container Scheduling Strategy Based on Machine Learning in Microservice.pdf:pdf},
isbn = {9781728127200},
journal = {Proceedings - 2019 IEEE International Conference on Services Computing, SCC 2019 - Part of the 2019 IEEE World Congress on Services},
keywords = {Docker container,Machine learning,Microservices,Random forest regression,Scheduling strategy},
pages = {65--71},
title = {{A container scheduling strategy based on machine learning in microservice architecture}},
year = {2019}
}
@article{Grabis2018,
abstract = {Business processes are redesigned as a part of business process management lifecycle and data intensive activities such as image processing, prediction and classification are increasingly incorporated into business processes. Data intensive activities often involve usage of data analysis models. It is argued that successful development and execution of data intensive business processes requires synchronization of business process redesign and data analysis models development activities. The business process architecture integrating core business process with data analysis model setup and updating sub-processes is developed. Business process transformation stages for incorporating data-intensive activities are outlined. The process redesign and execution is supported by the technical architecture based on microservices. An example of business process redesign is discussed.},
author = {Grabis, Janis and Kampars, Janis},
doi = {10.5220/0006805207360742},
file = {:D\:/Documents/Bath/Dissertation/References/68052.pdf:pdf},
isbn = {9789897582981},
journal = {ICEIS 2018 - Proceedings of the 20th International Conference on Enterprise Information Systems},
keywords = {Business Process Redesign,Data Analysis Model,Digital Transformation,Microservices},
number = {Iceis 2018},
pages = {736--742},
title = {{Application of microservices for digital transformation of data-intensive business processes}},
volume = {2},
year = {2018}
}
@article{Grossman2016,
author = {Grossman, Robert L. and Heath, Allison and Murphy, Mark and Patterson, Maria},
doi = {10.4172/2157-7633.1000305.Improved},
file = {:D\:/Documents/Bath/Dissertation/References/nihms908378.pdf:pdf},
journal = {Comput Sci Eng.},
keywords = {amphiphysin,bin1,dynamin,ehd1,endocytic recycling,endocytosis,rme-1},
number = {5},
pages = {10--20},
title = {{A Case for Data Commons}},
volume = {1},
year = {2016}
}
@article{Perez2018,
abstract = {New architectural patterns (e.g. microservices), the massive adoption of Linux containers (e.g. Docker containers), and improvements in key features of Cloud computing such as auto-scaling, have helped developers to decouple complex and monolithic systems into smaller stateless services. In turn, Cloud providers have introduced serverless computing, where applications can be defined as a workflow of event-triggered functions. However, serverless services, such as AWS Lambda, impose serious restrictions for these applications (e.g. using a predefined set of programming languages or difficulting the installation and deployment of external libraries). This paper addresses such issues by introducing a framework and a methodology to create Serverless Container-aware ARchitectures (SCAR). The SCAR framework can be used to create highly-parallel event-driven serverless applications that run on customized runtime environments defined as Docker images on top of AWS Lambda. This paper describes the architecture of SCAR together with the cache-based optimizations applied to minimize cost, exemplified on a massive image processing use case. The results show that, by means of SCAR, AWS Lambda becomes a convenient platform for High Throughput Computing, specially for highly-parallel bursty workloads of short stateless jobs.},
author = {P{\'{e}}rez, Alfonso and Molt{\'{o}}, Germ{\'{a}}n and Caballer, Miguel and Calatrava, Amanda},
doi = {10.1016/j.future.2018.01.022},
file = {:C\:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/P{\'{e}}rez et al. - 2018 - Serverless computing for container-based architectures.pdf:pdf},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {AWS lambda,Cloud computing,Docker,Elasticity,Serverless},
pages = {50--59},
publisher = {Elsevier B.V.},
title = {{Serverless computing for container-based architectures}},
url = {https://doi.org/10.1016/j.future.2018.01.022},
volume = {83},
year = {2018}
}
@article{Pahl2018,
abstract = {The Internet of Things (IoT) is a Distributed System of cooperating Microservices ($\mu$ Ss). IoT services manage devices that monitor and control their environments. The interaction of the IoT with the physical environment creates strong security, privacy, and safety implications. It makes providing adequate security for IoT $\mu$ Ss essential. However, the complexity of IoT services makes detecting anomalous behavior difficult.We present a machine-learning based approach for modeling IoT service behavior by only observing inter-service communication. Our algorithm continuously learns $\mu$S models on distributed IoT nodes within an IoT site. Combining the learned models within and in-between IoT sites converges our $\mu$S models within short time. Sharing the resulting stable models among compute nodes enables good anomaly detection.As one application, firewalling IoT $\mu$ Ss becomes possible. Combining our autonomous $\mu$S modeling with firewalling enables retrofitting security to existing IoT installations. We enable retrofitting access control to existing non-secure IoT installations.Our proposed approach is resource efficient, matching the requirements of the IoT. To evaluate the quality of our proposed algorithm, we show its behavior for a set of common IoT attacks. We evaluate how domain knowledge enables us to decorrelate events on a node, and how adding context features improves the detection rate.},
author = {Pahl, Marc Oliver and Aubet, Francois Xavier},
file = {:D\:/Documents/Bath/Dissertation/References/08584985.pdf:pdf},
isbn = {9783903176140},
journal = {14th International Conference on Network and Service Management, CNSM 2018 and Workshops, 1st International Workshop on High-Precision Networks Operations and Control, HiPNet 2018 and 1st Workshop on Segment Routing and Service Function Chaining, SR+SFC 2},
keywords = {Anomaly detection,IoT,Machine learning,Modeling,Security},
number = {Cnsm},
pages = {72--80},
title = {{All Eyes on You: Distributed Multi-Dimensional IoT Microservice Anomaly Detection}},
year = {2018}
}
@article{Le2015,
abstract = {The NSF EPSCOR funded Solar Nexus Project is a collaborative effort between scientists, engineers, educators, and technicians to increase the amount of renewable solar energy in Nevada while eliminating its adverse effects on the surrounding environment and wildlife, and minimizing water consumption. The project seeks to research multiple areas, including water usage at power plants, the effect of power plant construction on the surrounding ecology, alternative wastewater methods to maintain solar panels, and interdisciplinary solutions to improve solar energy in Nevada. In order to organize and analyze this data to produce effective change, Nexus needs a centralized database to store collected data. To this end the Nevada Research Data Center is designed to collect, format, and store data for scientists to view and consider. This paper presents a new architecture solution for the NRDC. Based in microservices, the solution aims to ensure scalability, reliability, and maintainability of this data center. Background on NRDC is provided in the paper, together with details on the proposed solution's software specification, design, and prototype implementation. A discussion of the microservice-based architecture's benefits and an outline of planned directions of future work are also included.},
author = {Le, Vinh D. and Neff, Melanie M. and Stewart, Royal V. and Kelley, Richard and Fritzinger, Eric and Dascalu, Sergiu M. and Harris, Frederick C.},
doi = {10.1109/INDIN.2015.7281983},
file = {:D\:/Documents/Bath/Dissertation/References/07281983.pdf:pdf},
isbn = {9781479966493},
journal = {Proceeding - 2015 IEEE International Conference on Industrial Informatics, INDIN 2015},
keywords = {Design,Microservice Architecture,Monolithic Architecture,NRDC,Prototype Implementation,Software Specifications},
pages = {1659--1664},
publisher = {IEEE},
title = {{Microservice-based architecture for the NRDC}},
year = {2015}
}
@article{Pedroso2018,
abstract = {With the emergence of Big Data, the scarcity of data scientists to analyse all the data being produced in different domains became evident. To train new data scientists faster, web applications providing data science practices without requiring programming skills can be a great help. However, some available web applications lack in providing good data mining practices, specially for assessment and selection of models. Thus, in this paper we describe a system, currently under development, that will provide the construction of data mining processes enforcing good data mining practices. The system will be available through a web UI and will follow a microservices architecture that is still being designed and tested. Preliminary usability tests, were conducted with two groups of users to evaluate the envisioned concept for the creation of data mining processes. In these tests we observed a general high level of user satisfaction. To assess the performance of the current system design, we have done tests in a public cloud where we observed interesting results that will guide us in new directions.},
author = {Pedroso, Artur and Lopes, Bruno Leonel and Correia, Jaime and Araujo, Filipe and Cardoso, Jorge and Paiva, Rui Pedro},
doi = {10.5220/0007226003400346},
file = {:D\:/Downloads/KDIR_2018_46.pdf:pdf},
isbn = {9789897583308},
journal = {IC3K 2018 - Proceedings of the 10th International Joint Conference on Knowledge Discovery, Knowledge Engineering and Knowledge Management},
keywords = {Data mining,Data science,Machine learning,Microservices},
number = {September},
pages = {340--346},
title = {{A data mining service for non-programmers}},
volume = {1},
year = {2018}
}
