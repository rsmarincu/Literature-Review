@article{Liu2017,
abstract = {RESTful Web APIs have no description files like WSDL in traditional Web service. Although some REST API definition models have been arising recently, there is still lacking in structured description format for existing large mounts of Web APIs. Almost all Web APIs are documented in semi-structured web pages, and these documentation formats are various for different sites. It's hard for machine to read the semantics of Web APIs. In this paper, we have proposed a novel hierarchical recurrent neural network to convert REST API documentation to structured machine-readable description format-The Swagger REST API specification. The network extracts the Swagger defined attributes of a REST API from HTML web pages without any feature engineering. With the extracted API specifications, we built an API repository to index, search and compose Web APIs. Experiment showed that the hierarchical RNN model performed well even with only a few training samples.},
author = {Liu, Shengpeng and Li, Ying and Sun, Guangyu and Fan, Binbin and Deng, Shuiguang},
doi = {10.1109/ICWS.2017.85},
file = {:D$\backslash$:/Documents/Bath/Dissertation/References/08029826.pdf:pdf},
isbn = {9781538607527},
journal = {Proceedings - 2017 IEEE 24th International Conference on Web Services, ICWS 2017},
keywords = {RNN,Swagger,Web API Extraction},
pages = {708--713},
title = {{Hierarchical RNN Networks for Structured Semantic Web API Model Learning and Extraction}},
year = {2017}
}
@book{restadvanced,
author = {Pautasso, Cesare and Wilde, Erik and Alarcon, Rosa},
file = {:D$\backslash$:/Documents/Bath/Dissertation/References/2014{\_}Book{\_}RESTAdvancedResearchTopicsAndP.pdf:pdf},
isbn = {9781461492986},
pages = {400},
publisher = {Springer International Publishing},
title = {{REST:Advanced Research Topics adn Practical Applications}},
year = {2014}
}
@article{Li2015,
abstract = {Although many current Cloud computing platforms are still based on virtual machines running on hyper visors, there are two trends towards a more flexible and efficient Cloud computing paradigm. One trend is the Resource-as-a-Service (RaaS) based Cloud, where the fine-grained resources can be rented at short time intervals. The other one is the container-based Cloud, where the lightweight containers replace the virtual machines. Both trends require a more flexible and efficient resource management framework to address the increased demands for scalability, heterogeneity, flexibility, deployment density, and efficiency. To provide such a resource management framework, this paper describes a REST service framework based on the concept of Resource-Oriented Network (RON) that decouples the resource representation plane, control plane, and data plane. Created by an automated top-down development process, RON provides uniform and cohesive REST APIs to manage the fine-grained resources for processes, tasks, jobs, containers, servers, and clusters, by encapsulating the underlying Linux resource control models. In addition, we present a Role-Based Access Control (RBAC) architecture to secure the access to RON in the Cloud. A prototype system has been implemented and our experimental results show that the approach is feasible and the performance is consistent with the client and server workloads.},
author = {Li, Li and Tang, Tony and Chou, Wu},
doi = {10.1109/CLOUD.2015.91},
file = {:D$\backslash$:/Documents/Bath/Dissertation/References/07214101.pdf:pdf},
isbn = {9781467372879},
journal = {Proceedings - 2015 IEEE 8th International Conference on Cloud Computing, CLOUD 2015},
keywords = {Cloud,Container,Docker,REST API,Resource Management,Resource-Oriented Network,Resource-as-a-Service,Role-Based Access Control},
pages = {645--652},
title = {{A REST Service Framework for Fine-Grained Resource Management in Container-Based Cloud}},
year = {2015}
}
@article{Gossett2018,
abstract = {Machine learning approaches, enabled by the emergence of comprehensive databases of materials properties, are becoming a fruitful direction for materials analysis. As a result, a plethora of models have been constructed and trained on existing data to predict properties of new systems. These powerful methods allow researchers to target studies only at interesting materials – neglecting the non-synthesizable systems and those without the desired properties – thus reducing the amount of resources spent on expensive computations and/or time-consuming experimental synthesis. However, using these predictive models is not always straightforward. Often, they require a panoply of technical expertise, creating barriers for general users. AFLOW-ML (AFLOW Machine Learning) overcomes the problem by streamlining the use of the machine learning methods developed within the AFLOW consortium. The framework provides an open RESTful API to directly access the continuously updated algorithms, which can be transparently integrated into any workflow to retrieve predictions of electronic, thermal and mechanical properties. These types of interconnected cloud-based applications are envisioned to be capable of further accelerating the adoption of machine learning methods into materials development.},
archivePrefix = {arXiv},
arxivId = {1711.10744},
author = {Gossett, Eric and Toher, Cormac and Oses, Corey and Isayev, Olexandr and Legrain, Fleur and Rose, Frisco and Zurek, Eva and Carrete, Jes{\'{u}}s and Mingo, Natalio and Tropsha, Alexander and Curtarolo, Stefano},
doi = {10.1016/j.commatsci.2018.03.075},
eprint = {1711.10744},
file = {:D$\backslash$:/Documents/Bath/Dissertation/References/1-s2.0-S0927025618302349-main.pdf:pdf},
issn = {09270256},
journal = {Computational Materials Science},
keywords = {AFLOW,Machine learning,Materials genomics,REST-API},
number = {November 2017},
pages = {134--145},
publisher = {Elsevier},
title = {{AFLOW-ML: A RESTful API for machine-learning predictions of materials properties}},
url = {https://doi.org/10.1016/j.commatsci.2018.03.075},
volume = {152},
year = {2018}
}
@article{Fernandez-Villamor2010,
abstract = {Current web has a vast number of applications available that offer users a wide domain of services. Most services, however, cannot be machine processed, which limits service composition for application and mashup development. Research on Semantic Web Services contributes to the improvement of interoperability and composition of applications and services. Many approaches cover service description by following paradigms such as Web Services and REST architectural style, allowing describing any kind of service for its use by an automatic agent, but sometimes using these solutions can be a time-consuming task. This paper introduces Microservices, a lightweight service classification framework for REST architectural style. Microservices do not attempt to describe every possible service, but to provide a way to describe a set of services in a simple way. Microservice descriptions consist of a set of terms that represent service features. After describing features semantically, microservices framework allows generating detailed service descriptions, which allows reusing common feature descriptions across different services. A use case that adapts heterogeneous search services to produce a standard interface using microservices is described.},
author = {Fern{\'{a}}ndez-Villamor, Jos{\'{e}} Ignacio and Iglesias, Carlos {\'{A}} and Garijo, Mercedes},
file = {:D$\backslash$:/Documents/Bath/Dissertation/References/microserviceslioghtweigh.pdf:pdf},
isbn = {9789896740221},
journal = {ICAART 2010 - 2nd International Conference on Agents and Artificial Intelligence, Proceedings},
keywords = {Mashups,REST,Semantic web,Service description,Web applications},
number = {January 2010},
pages = {576--579},
title = {{Microservices lightweight service descriptions for REST architectural style}},
volume = {1},
year = {2010}
}
@article{Tanna2018,
abstract = {Data Analytics and Machine Learning have become an integral part of everyone's daily life. Most software and intelligent systems use these technologies either to make predictions or to take informed actions. However, Machine Learning and Data Analytics are not easy to make use of for regular users, especially for people who do not belong to the Computer Science domain, as it requires a lot of coding knowledge and expertise in Mathematics. To avoid the steep learning curve, the implementation proposes using Analytics as a Service. Though this has been implemented before by industry stalwarts such as Microsoft, Amazon and Google, these services are still very complex to use. They are paid services and require prior Machine Learning knowledge. The Service is relatively easy to use, and requires no prior knowledge of Machine Learning or Data Analytics. The user has to upload a dataset and choose the variable that has to be predicted, the system builds a model and provide it as a ReST based API, which can be called from any device or software that is connected to the internet. This paper is mainly aimed at aiding students and staff in integrating Machine Learning based intelligence into their software and devices, and in performing Data Analytics.},
author = {Tanna, Ronak D. and Kumar, K. Sri Vishnu and Karthika, S.},
doi = {10.1109/ICCIDS.2017.8272659},
file = {:D$\backslash$:/Documents/Bath/Dissertation/References/08272659.pdf:pdf},
isbn = {9781509055951},
journal = {ICCIDS 2017 - International Conference on Computational Intelligence in Data Science, Proceedings},
keywords = {Application Programming Interface (API),Classification,Machine Learning,Regression,Representational State Transfer (ReST)},
pages = {1--6},
title = {{Analytics as a service for beginners}},
volume = {2018-January},
year = {2018}
}
@article{Haupt2017,
abstract = {Today, REST APIs have established as a means for realizing distributed systems and are supposed to gain even more importance in the context of Cloud Computing, Internet of Things, and Microservices. Nevertheless, many existing REST APIs are known to be not well-designed, resulting in the absence of desirable quality attributes that truly RESTful systems entail. Although existing analysis show, that many REST APIs are not fully REST compliant, it is still an open issue how to improve this deficit and where to start. In this work, we introduce a framework for the structural analysis of REST APIs based on their description documents, as this allows for a comprehensive, well-structured analysis approach that also includes analyzing the corresponding API description languages. A first validation builds on a set of 286 real world API descriptions available as Swagger documents, and comprises their transformation into a canonical metamodel for REST APIs as well as a metrics-based analysis and discussion of their structural characteristics with respect to compliance with the REST architectural style.},
author = {Haupt, Florian and Leymann, Frank and Scherer, Anton and Vukojevic-Haupt, Karolina},
doi = {10.1109/ICSA.2017.40},
file = {:D$\backslash$:/Documents/Bath/Dissertation/References/07930199.pdf:pdf},
isbn = {9781509057290},
journal = {Proceedings - 2017 IEEE International Conference on Software Architecture, ICSA 2017},
keywords = {REST,analysis,interface description language},
pages = {55--58},
publisher = {IEEE},
title = {{A Framework for the Structural Analysis of REST APIs}},
year = {2017}
}
@article{Medvedev2016,
abstract = {SciServer Compute uses Jupyter notebooks running within server-side Docker containers attached to large relational databases and file storage to bring advanced analysis capabilities close to the data. SciServer Compute is a component of SciServer, a big-data infrastructure project developed at Johns Hopkins University that will provide a common environment for computational research. SciServer Compute integrates with large existing databases in the fields of astronomy, cosmology, turbulence, genomics, oceanography and materials science. These are accessible through the CasJobs service for direct SQL queries. SciServer Compute adds interactive server-side computational capabilities through notebooks in Python, R and MATLAB, an API for running asynchronous tasks, and a very large (hundreds of terabytes) scratch space for storing intermediate results. Science-ready results can be stored on a Dropbox-like service, SciDrive, for sharing with collaborators and dissemination to the public. Notebooks and batch jobs run inside Docker containers owned by the users. This provides security and isolation and allows flexible configuration of computational contexts through domain specific images and mounting of domain specific data sets. We present a demo that illustrates the capabilities of SciServer Compute: using Jupyter notebooks, performing analyses on data selections from diverse scientific fields, and running asynchronous jobs in a Docker container. The demo will highlight the data flow between file storage, database, and compute components.},
author = {Medvedev, Dmitry and Lemson, Gerard and Rippin, Mike},
doi = {10.1145/2949689.2949700},
file = {:C$\backslash$:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Medvedev, Lemson, Rippin - 2016 - SciServer compute Bringing analysis close to the data.pdf:pdf},
isbn = {9781450342155},
journal = {ACM International Conference Proceeding Series},
keywords = {Docker,Jupyter,Python,application containers,applied computing,data analysis,scientific workflows,virtualization},
title = {{SciServer compute: Bringing analysis close to the data}},
volume = {18-20-July},
year = {2016}
}
@book{Proll2005,
author = {Pr{\"{o}}ll, Birgit and Werthner, Hannes},
booktitle = {Lecture Notes in Computer Science},
file = {:D$\backslash$:/Documents/Bath/Dissertation/References/2012{\_}Book{\_}FutureGenerationInformationTec.pdf:pdf},
isbn = {9783642355844},
issn = {03029743},
title = {{Lecture Notes in Computer Science: Preface}},
volume = {3590},
year = {2005}
}
@book{Kulkarni2018,
author = {Kulkarni, Ketki and B, Aris Pagourtzis and Potika, Katerina and Potikas, Petros},
doi = {10.1007/978-3-030-19759-9},
file = {:C$\backslash$:/Users/Robert/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kulkarni et al. - 2018 - Algorithmic Aspects of Cloud Computing.pdf:pdf},
isbn = {9783030197599},
keywords = {Community detection,Hierarchi,Neighborhood overlap,community detection,edge betweenness,hierarchical clustering,modularity,neighborhood overlap,social networks,spanning trees},
pages = {13--24},
title = {{Algorithmic Aspects of Cloud Computing}},
url = {http://dx.doi.org/10.1007/978-3-030-19759-9{\_}2},
volume = {2},
year = {2018}
}
